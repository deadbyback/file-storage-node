/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AccountService } from "../account.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AccountCreateInput } from "./AccountCreateInput";
import { Account } from "./Account";
import { AccountFindManyArgs } from "./AccountFindManyArgs";
import { AccountWhereUniqueInput } from "./AccountWhereUniqueInput";
import { AccountUpdateInput } from "./AccountUpdateInput";
import { SubscriptionPlanFindManyArgs } from "../../subscriptionPlan/base/SubscriptionPlanFindManyArgs";
import { SubscriptionPlan } from "../../subscriptionPlan/base/SubscriptionPlan";
import { SubscriptionPlanWhereUniqueInput } from "../../subscriptionPlan/base/SubscriptionPlanWhereUniqueInput";
import { ArchiveFindManyArgs } from "../../archive/base/ArchiveFindManyArgs";
import { Archive } from "../../archive/base/Archive";
import { ArchiveWhereUniqueInput } from "../../archive/base/ArchiveWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AccountControllerBase {
  constructor(
    protected readonly service: AccountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Account })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAccount(
    @common.Body() data: AccountCreateInput
  ): Promise<Account> {
    return await this.service.createAccount({
      data: {
        ...data,

        account: data.account
          ? {
              connect: data.account,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        organizationId: true,
        email: true,
        name: true,
        password: true,

        account: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Account] })
  @ApiNestedQuery(AccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async accounts(@common.Req() request: Request): Promise<Account[]> {
    const args = plainToClass(AccountFindManyArgs, request.query);
    return this.service.accounts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        organizationId: true,
        email: true,
        name: true,
        password: true,

        account: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Account })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async account(
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<Account | null> {
    const result = await this.service.account({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        organizationId: true,
        email: true,
        name: true,
        password: true,

        account: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Account })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAccount(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() data: AccountUpdateInput
  ): Promise<Account | null> {
    try {
      return await this.service.updateAccount({
        where: params,
        data: {
          ...data,

          account: data.account
            ? {
                connect: data.account,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          organizationId: true,
          email: true,
          name: true,
          password: true,

          account: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Account })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAccount(
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<Account | null> {
    try {
      return await this.service.deleteAccount({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          organizationId: true,
          email: true,
          name: true,
          password: true,

          account: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/subscriptionPlans")
  @ApiNestedQuery(SubscriptionPlanFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "read",
    possession: "any",
  })
  async findSubscriptionPlans(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<SubscriptionPlan[]> {
    const query = plainToClass(SubscriptionPlanFindManyArgs, request.query);
    const results = await this.service.findSubscriptionPlans(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        memoryLimit: true,
        name: true,

        account: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subscriptionPlans")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectSubscriptionPlans(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: SubscriptionPlanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptionPlans: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subscriptionPlans")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updateSubscriptionPlans(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: SubscriptionPlanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptionPlans: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subscriptionPlans")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectSubscriptionPlans(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: SubscriptionPlanWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptionPlans: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/archives")
  @ApiNestedQuery(ArchiveFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Archive",
    action: "read",
    possession: "any",
  })
  async findArchives(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<Archive[]> {
    const query = plainToClass(ArchiveFindManyArgs, request.query);
    const results = await this.service.findArchives(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        account: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/archives")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectArchives(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ArchiveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      archives: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/archives")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updateArchives(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ArchiveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      archives: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/archives")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectArchives(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ArchiveWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      archives: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/accounts")
  @ApiNestedQuery(AccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async findAccounts(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<Account[]> {
    const query = plainToClass(AccountFindManyArgs, request.query);
    const results = await this.service.findAccounts(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        organizationId: true,
        email: true,
        name: true,
        password: true,

        account: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectAccounts(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updateAccounts(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectAccounts(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }
}
