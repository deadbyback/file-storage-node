/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Archive as PrismaArchive,
  File as PrismaFile,
  Account as PrismaAccount,
} from "@prisma/client";

export class ArchiveServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ArchiveCountArgs, "select">): Promise<number> {
    return this.prisma.archive.count(args);
  }

  async archives(args: Prisma.ArchiveFindManyArgs): Promise<PrismaArchive[]> {
    return this.prisma.archive.findMany(args);
  }
  async archive(
    args: Prisma.ArchiveFindUniqueArgs
  ): Promise<PrismaArchive | null> {
    return this.prisma.archive.findUnique(args);
  }
  async createArchive(args: Prisma.ArchiveCreateArgs): Promise<PrismaArchive> {
    return this.prisma.archive.create(args);
  }
  async updateArchive(args: Prisma.ArchiveUpdateArgs): Promise<PrismaArchive> {
    return this.prisma.archive.update(args);
  }
  async deleteArchive(args: Prisma.ArchiveDeleteArgs): Promise<PrismaArchive> {
    return this.prisma.archive.delete(args);
  }

  async findFiles(
    parentId: string,
    args: Prisma.FileFindManyArgs
  ): Promise<PrismaFile[]> {
    return this.prisma.archive
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .files(args);
  }

  async getAccount(parentId: string): Promise<PrismaAccount | null> {
    return this.prisma.archive
      .findUnique({
        where: { id: parentId },
      })
      .account();
  }
}
